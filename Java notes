
What are the new features introduced in JAVA 8?
There are dozens of features added to Java 8, the most significant ones are mentioned below −

Lambda expression − Adds functional processing capability to Java.

Method references − Referencing functions by their names instead of invoking them directly. Using functions as parameter.

Default method − Interface to have default method implementation.

New tools − New compiler tools and utilities are added like 'jdeps' to figure out dependencies.

Stream API − New stream API to facilitate pipeline processing.

Date Time API − Improved date time API.

Optional − Emphasis on best practices to handle null values properly.

Nashorn, JavaScript Engine − A Java-based engine to execute JavaScript code.

Along with these new featuers, lots of feature enhancements are done under-the-hood, at both compiler and JVM level.

How will you sort a list of string using Java 8 lambda expression?
Following code sorts a list of string using Java 8 lambda expression:

//sort using java 8
private void sortUsingJava8(List<String> names) {
  Collections.sort(names, (s1, s2) -> s1.compareTo(s2));
}
What are the characteristics of a Java 8 lambda expression?
A lambda expression is characterized by the following syntax -

parameter −> expression body
Following are the important characteristics of a lambda expression −

Optional type declaration − No need to declare the type of a parameter. The compiler can inference the same from the value of the parameter.

Optional parenthesis around parameter − No need to declare a single parameter in parenthesis. For multiple parameters, parentheses are required.

Optional curly braces − No need to use curly braces in expression body if the body contains a single statement.

Optional return keyword − The compiler automatically returns the value if the body has a single expression to return the value. Curly braces are required to indicate that expression returns a value.

Why lambda expression is to be used?
Lambda expressions are used primarily to define inline implementation of a functional interface, i.e., an interface with a single method only. In the above example, we've used various types of lambda expressions to define the operation method of MathOperation interface. Then we have defined the implementation of sayMessage of GreetingService.

Lambda expression eliminates the need of anonymous class and gives a very simple yet powerful functional programming capability to Java.

What kind of variable you can access in an lambda expression??
Using lambda expression, you can refer to final variable or effectively final variable (which is assigned only once). Lambda expression throws a compilation error, if a variable is assigned a value the second time.

What are method references?
Method references help to point to methods by their names. A method reference is described using :: (double colon) symbol. A method reference can be used to point the following types of methods −

Static methods

Instance methods

Constructors using new operator (TreeSet::new)

Explain the System.out::println expression.
System.out::println method is a static method reference to println method of out object of System class.

What are functional interfaces?
Functional interfaces have a single functionality to exhibit. For example, a Comparable interface with a single method 'compareTo' is used for comparison purpose. Java 8 has defined a lot of functional interfaces to be used extensively in lambda expressions.

What is the purpose of BiConsumer<T,U> functional interface?
It represents an operation that accepts two input arguments, and returns no result.

What is the purpose of BiFunction<T,U,R> functional interface?
It represents a function that accepts two arguments and produces a result.

What is the purpose of BinaryOperator<T> functional interface?
It represents an operation upon two operands of the same type, producing a result of the same type as the operands.

What is the purpose of BiPredicate<T,U> functional interface?
It represents a predicate (Boolean-valued function) of two arguments.

What is the purpose of BooleanSupplier functional interface?
It represents a supplier of Boolean-valued results.

What is the purpose of Consumer<T> functional interface?
It represents an operation that accepts a single input argument and returns no result.

What is the purpose of DoubleBinaryOperator functional interface?
It represents an operation upon two double-valued operands and producing a double-valued result.

What is the purpose of DoubleConsumer functional interface?
It represents an operation that accepts a single double-valued argument and returns no result.

What is the purpose of DoubleFunction<R> functional interface?
It represents a function that accepts a double-valued argument and produces a result.

What is the purpose of DoublePredicate functional interface?
It represents a predicate (Boolean-valued function) of one double-valued argument.

What is the purpose of DoubleSupplier functional interface?
It represents a supplier of double-valued results.

What is the purpose of DoubleToIntFunction functional interface?
It represents a function that accepts a double-valued argument and produces an int-valued result.

What is the purpose of DoubleToLongFunction functional interface?
What is the purpose of DoubleUnaryOperator functional interface?
What is the purpose of Function<T,R> functional interface?
What is the purpose of IntBinaryOperator functional interface?
What is the purpose of IntConsumer functional interface?
What is the purpose of IntFunction<R> functional interface?
What is the purpose of IntPredicate functional interface?
What is the purpose of IntSupplier functional interface?
What is the purpose of IntToDoubleFunction functional interface?
What is the purpose of IntToLongFunction functional interface?
What is the purpose of IntUnaryOperator functional interface?
What is the purpose of LongBinaryOperator functional interface?
What is the purpose of LongConsumer functional interface?
What is the purpose of LongFunction<R> functional interface?
What is the purpose of LongPredicate functional interface?
What is the purpose of LongSupplier functional interface?
What is the purpose of LongToDoubleFunction functional interface?
What is the purpose of LongToIntFunction functional interface?
What is the purpose of LongUnaryOperator functional interface?
What is the purpose of ObjDoubleConsumer<T> functional interface?
What is the purpose of ObjIntConsumer<T> functional interface?
What is the purpose of ObjLongConsumer<T> functional interface?
What is the purpose of Predicate<T> functional interface?
What is the purpose of Supplier<T> functional interface?
What is the purpose of ToDoubleBiFunction<T,U> functional interface?
What is the purpose of ToDoubleFunction<T> functional interface?
What is the purpose of ToIntBiFunction<T,U> functional interface?
What is the purpose of ToIntFunction<T> functional interface?
What is the purpose of ToLongBiFunction<T,U> functional interface?
What is the purpose of ToLongFunction<T> functional interface?
What is the purpose of UnaryOperator<T> functional interface?
What are default methods?
What are static default methods?
How will you call a default method of an interface in a class?
How will you call a static method of an interface in a class?
What is streams in Java 8?
What is stream pipelining in Java 8?
What is the difference between Collections and Stream in Java8 ?
What is the purpose of forEach method of stream in java 8?
How will you print 10 random numbers using forEach of java 8?
What is the purpose of map method of stream in java 8?
How will you print unique squares of numbers in java 8?
What is the purpose of filter method of stream in java 8?
How will you print count of empty strings in java 8?
What is the purpose of limit method of stream in java 8?
How will you print 10 random numbers in java 8?
What is the purpose of sorted method of stream in java 8?
How will you print 10 random numbers in a sorted order in java 8?
What is Parallel Processing in Java 8?
What are collectors in Java 8?
What are Statistics collectors in Java 8?
How will you get the highest number present in a list using Java 8?
How will you get the lowest number present in a list using Java 8?
How will you get the sum of all numbers present in a list using Java 8?
How will you get the average of all numbers present in a list using Java 8?
What is Optional in Java8?
What is Nashorn in Java8?
What is jjs in JAVA8?
Can you execute javascript code from java 8 code base?
What is local datetime API in JAVA8?
What is zoned datetime API in JAVA8?
What is chromounits in java8?
How will you get the current date using local datetime api of java8?
How will you add 1 week to current date using local datetime api of java8?
How will you add 1 month to current date using local datetime api of java8?
How will you add 1 year to current date using local datetime api of java8?
How will you add 10 years to current date using local datetime api of java8?
How will you get next tuesday using java8?
How will you get second saturday of next month using java8?
How will you get the instant of current date in terms of milliseconds using java8?
How will you get the instant of local date time using time in of milliseconds using java8?
How will you get the instant of zoned date time using time in of milliseconds using java8?
Which class implements a decoder for decoding byte data using the Base64 encoding scheme in Java8?
Which class implements an encoder for encoding byte data using the Base64 encoding scheme in Java8?
How will you create a Base64 decoder?
How will you create a Base64 encoder?
How will you create a Base64 decoder that decodes using the MIME type base64 encoding scheme?
How will you create a Base64 encoder that encodes using the MIME type base64 encoding scheme?
How will you create a Base64 decoder that decodes using the URL and Filename safe type base64 encoding scheme?
How will you create a Base64 encoder that encodes using the URL and Filename safe type base64 encoding scheme?
